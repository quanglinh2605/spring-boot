package com.demo.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.MimeTypeUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("api/demo")
public class DemoRestController {

	@RequestMapping(value = "demo1", method = RequestMethod.GET, produces = MimeTypeUtils.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> demo1() {
		try {
			return new ResponseEntity<String>("Hello", HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<String>(HttpStatus.BAD_REQUEST);
		}
	}
	
	@RequestMapping(value = "demo2", method = RequestMethod.GET, produces = MimeTypeUtils.TEXT_HTML_VALUE)
	public ResponseEntity<String> demo2() {
		try {
			return new ResponseEntity<String>("<b><i><u>Hello</u></i></b>", HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<String>(HttpStatus.BAD_REQUEST);
		}
	}
	
	@RequestMapping(value = "demo3/{fullname}", method = RequestMethod.GET, produces = MimeTypeUtils.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> demo3(@PathVariable("fullname") String fullname) {
		try {
			return new ResponseEntity<String>("Hello: " + fullname, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<String>(HttpStatus.BAD_REQUEST);
		}
	}
	
	@RequestMapping(value = "demo4/{t}/{type}", method = RequestMethod.GET, produces = MimeTypeUtils.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> demo4(@PathVariable("t") double t, @PathVariable("type") String type ) {
		try {
			double result = 0;
			if(type.equalsIgnoreCase("ftoc")){
				result = (t - 32)/1.8;
			}
			if(type.equalsIgnoreCase("ctof")) {
				result = t*1.8 + 32;
			}
			String s = Double.toString(result);
			return new ResponseEntity<String>(s, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<String>(HttpStatus.BAD_REQUEST);
		}
	}
	
	@RequestMapping(value = "demo5/{toan}/{ly}/{hoa}", method = RequestMethod.GET, produces = MimeTypeUtils.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> demo5(@PathVariable("toan") int toan, @PathVariable("ly") int ly,@PathVariable("hoa") int hoa ) {
		try {
			double result = (toan + ly + hoa)/3;
			String s = Double.toString(result);
			return new ResponseEntity<String>(s, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<String>(HttpStatus.BAD_REQUEST);
		}
	}
	
	@RequestMapping(value = "demo6/{toan}/{ly}/{hoa}", method = RequestMethod.GET, produces = MimeTypeUtils.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> demo6(@PathVariable("toan") int toan, @PathVariable("ly") int ly,@PathVariable("hoa") int hoa ) {
		try {
			String hocluc = "";
			double result = (toan + ly + hoa)/3;
			if(result >= 8) {
				hocluc = "gioi";
			}else if(result > 6.5) {
				hocluc = "kha";
			}else if(result > 5) {
				hocluc = "trungbinh";
			}else {
				hocluc = "yeu";
			}
			return new ResponseEntity<String>(hocluc, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<String>(HttpStatus.BAD_REQUEST);
		}
	}
}
